// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ccAPfW3XfEkPVBiJWBPNXX
// Component: 6fSdTsVn1h
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: ccAPfW3XfEkPVBiJWBPNXX/projectcss
import sty from "./PlasmicTokenDocumentation.module.css"; // plasmic-import: 6fSdTsVn1h/css

export type PlasmicTokenDocumentation__VariantMembers = {};
export type PlasmicTokenDocumentation__VariantsArgs = {};
type VariantPropType = keyof PlasmicTokenDocumentation__VariantsArgs;
export const PlasmicTokenDocumentation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTokenDocumentation__ArgsType = {};
type ArgPropType = keyof PlasmicTokenDocumentation__ArgsType;
export const PlasmicTokenDocumentation__ArgProps = new Array<ArgPropType>();

export type PlasmicTokenDocumentation__OverridesType = {
  root?: p.Flex<"div">;
  tokenName?: p.Flex<"div">;
  value?: p.Flex<"div">;
  description?: p.Flex<"div">;
  color?: p.Flex<"div">;
};

export interface DefaultTokenDocumentationProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTokenDocumentation__RenderFunc(props: {
  variants: PlasmicTokenDocumentation__VariantsArgs;
  args: PlasmicTokenDocumentation__ArgsType;
  overrides: PlasmicTokenDocumentation__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"tokenName"}
        data-plasmic-override={overrides.tokenName}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.tokenName
        )}
      >
        {"tokenName"}
      </div>

      <div
        data-plasmic-name={"value"}
        data-plasmic-override={overrides.value}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.value)}
      >
        {"value"}
      </div>

      <div
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.description
        )}
      >
        {"description"}
      </div>

      <div
        data-plasmic-name={"color"}
        data-plasmic-override={overrides.color}
        className={classNames(projectcss.all, sty.color)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tokenName", "value", "description", "color"],
  tokenName: ["tokenName"],
  value: ["value"],
  description: ["description"],
  color: ["color"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tokenName: "div";
  value: "div";
  description: "div";
  color: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTokenDocumentation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTokenDocumentation__VariantsArgs;
    args?: PlasmicTokenDocumentation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTokenDocumentation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTokenDocumentation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTokenDocumentation__ArgProps,
          internalVariantPropNames: PlasmicTokenDocumentation__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTokenDocumentation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTokenDocumentation";
  } else {
    func.displayName = `PlasmicTokenDocumentation.${nodeName}`;
  }
  return func;
}

export const PlasmicTokenDocumentation = Object.assign(
  // Top-level PlasmicTokenDocumentation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokenName: makeNodeComponent("tokenName"),
    value: makeNodeComponent("value"),
    description: makeNodeComponent("description"),
    color: makeNodeComponent("color"),

    // Metadata about props expected for PlasmicTokenDocumentation
    internalVariantProps: PlasmicTokenDocumentation__VariantProps,
    internalArgProps: PlasmicTokenDocumentation__ArgProps
  }
);

export default PlasmicTokenDocumentation;
/* prettier-ignore-end */
