// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ccAPfW3XfEkPVBiJWBPNXX
// Component: H8WLATolXXZm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Button } from "@chakra-ui/react"; // plasmic-import: nwJmymbIeO/codeComponent
import { Accordion } from "@chakra-ui/react"; // plasmic-import: iX2SfGIvG4/codeComponent
import { AccordionItem } from "@chakra-ui/react"; // plasmic-import: djsosQ-HCn/codeComponent
import { AccordionButton } from "@chakra-ui/react"; // plasmic-import: AtuVx6PHdg/codeComponent
import { AccordionIcon } from "@chakra-ui/react"; // plasmic-import: WBrZ8eg0p2/codeComponent
import { AccordionPanel } from "@chakra-ui/react"; // plasmic-import: yjhw5S0V1B/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: 2SZVTvkOcfW/codeComponent
import { ArcadeIcon } from "@chakra-ui/react"; // plasmic-import: Nkaxn94onNV/codeComponent
import { Avatar } from "@chakra-ui/react"; // plasmic-import: RvqOMFznxb/codeComponent
import { AvatarBadge } from "@chakra-ui/react"; // plasmic-import: qmEjHPdncY/codeComponent
import { Badge } from "@chakra-ui/react"; // plasmic-import: -anu8mdSQN/codeComponent
import { BowlingIcon } from "@chakra-ui/react"; // plasmic-import: Q3X_03-2_M0/codeComponent
import { Breadcrumb } from "@chakra-ui/react"; // plasmic-import: Cuyb4WO80IP/codeComponent
import { BreadcrumbItem } from "@chakra-ui/react"; // plasmic-import: 0SpZhU-sXNH/codeComponent
import { BreadcrumbLink } from "@chakra-ui/react"; // plasmic-import: yrajYEBEgzh/codeComponent
import { ButtonGroup } from "@chakra-ui/react"; // plasmic-import: -s7GhUIW0e/codeComponent
import { ButtonPreview } from "@chakra-ui/react"; // plasmic-import: GNk_cULzqD-/codeComponent
import { Card } from "@chakra-ui/react"; // plasmic-import: VFCPKTgYUHr/codeComponent
import { CardHeader } from "@chakra-ui/react"; // plasmic-import: MLviYB9EaVP/codeComponent
import { ImageWithOverlay } from "../../../../components/ImageWithOverlay"; // plasmic-import: 9WAeitxuTZ1/codeComponent
import { Heading } from "@chakra-ui/react"; // plasmic-import: ed8sVN-Tsys/codeComponent
import { CardBody } from "@chakra-ui/react"; // plasmic-import: BDij3C1vZ8D/codeComponent
import { Tag } from "@chakra-ui/react"; // plasmic-import: 50ck5SOME6U/codeComponent
import { TagLeftIcon } from "@chakra-ui/react"; // plasmic-import: sxGoyhLm7xT/codeComponent
import { TagLabel } from "@chakra-ui/react"; // plasmic-import: A-Wg3jCOPKV/codeComponent
import { TagRightIcon } from "@chakra-ui/react"; // plasmic-import: lfPKjMviC5w/codeComponent
import { TagCloseButton } from "@chakra-ui/react"; // plasmic-import: v8eejj9YSQQ/codeComponent
import { CardFooter } from "@chakra-ui/react"; // plasmic-import: eMjJbj2jfTS/codeComponent
import { Stack } from "@chakra-ui/react"; // plasmic-import: mebLRBUKwOo/codeComponent
import { IconButton } from "@chakra-ui/react"; // plasmic-import: iEq6jVrwI96/codeComponent
import { GolfIcon } from "@chakra-ui/react"; // plasmic-import: yr7by7NZte_/codeComponent
import { Checkbox } from "@chakra-ui/react"; // plasmic-import: wvkSYiH3Zl/codeComponent
import { CheckboxGroup } from "@chakra-ui/react"; // plasmic-import: R1wtDkYAep/codeComponent
import { Divider } from "@chakra-ui/react"; // plasmic-import: m_cYb0sac4W/codeComponent
import { EscaperoomIcon } from "@chakra-ui/react"; // plasmic-import: 7kJh2N1MjhEg/codeComponent
import { FormControl } from "@chakra-ui/react"; // plasmic-import: vw70RxtbYnt/codeComponent
import { FormLabel } from "@chakra-ui/react"; // plasmic-import: Em6m23c4guw/codeComponent
import { Input } from "@chakra-ui/react"; // plasmic-import: 9R7LCX8asWM/codeComponent
import { FunPassIcon } from "@chakra-ui/react"; // plasmic-import: -hXFasoFMhk1/codeComponent
import { Highlight } from "@chakra-ui/react"; // plasmic-import: GUNnZW2nZls/codeComponent
import { HijinxIcon } from "@chakra-ui/react"; // plasmic-import: Zfq3mJ4ieCL/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: 67BCZHru3tA/codeComponent
import { KaraokeIcon } from "@chakra-ui/react"; // plasmic-import: iLzO_RQ4Y7j4/codeComponent
import { LaserIcon } from "@chakra-ui/react"; // plasmic-import: Q_7gJ2UDli21/codeComponent
import { LocationPinIcon } from "@chakra-ui/react"; // plasmic-import: xWdPwXBaXFzH/codeComponent
import { NumberInput } from "@chakra-ui/react"; // plasmic-import: zrO4YVO34j3/codeComponent
import { NumberInputField } from "@chakra-ui/react"; // plasmic-import: iO6VgUSY_HD/codeComponent
import { NumberInputStepper } from "@chakra-ui/react"; // plasmic-import: sgxobrQnVAg/codeComponent
import { NumberIncrementStepper } from "@chakra-ui/react"; // plasmic-import: vfs1neRemKQ/codeComponent
import { NumberDecrementStepper } from "@chakra-ui/react"; // plasmic-import: Q-ILY89Wmyr/codeComponent
import { Option } from "@chakra-ui/react"; // plasmic-import: XNyQJ6bzyO1/codeComponent
import { PinInput } from "@chakra-ui/react"; // plasmic-import: FpSuTBYmjxZ/codeComponent
import { PinInputField } from "@chakra-ui/react"; // plasmic-import: D9mnWWkT69T/codeComponent
import { Progress } from "@chakra-ui/react"; // plasmic-import: MgCR4eamnjl/codeComponent
import { RadioGroup } from "@chakra-ui/react"; // plasmic-import: Kif-qzaZMyL/codeComponent
import { Radio } from "@chakra-ui/react"; // plasmic-import: O398Z4a4W_N/codeComponent
import { Select } from "@chakra-ui/react"; // plasmic-import: DEozh9I4rm3/codeComponent
import { Stat } from "@chakra-ui/react"; // plasmic-import: 38jYoBk5OSm/codeComponent
import { StatLabel } from "@chakra-ui/react"; // plasmic-import: 4pM0Ms6apGa/codeComponent
import { StatNumber } from "@chakra-ui/react"; // plasmic-import: Ta9Zh2xxd9z/codeComponent
import { StatHelpText } from "@chakra-ui/react"; // plasmic-import: LsUdhe2abeJ/codeComponent
import { StatArrow } from "@chakra-ui/react"; // plasmic-import: D5NnbHvdSkR/codeComponent
import { Switch } from "@chakra-ui/react"; // plasmic-import: TICipbRM_ga/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: PY-DGwpXVhZ/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: s7tvMCPfR3l/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: yMCwKbm8kgM/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: LoK9PgkKWfK/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: KVhLzj8coWV/codeComponent
import { Table } from "@chakra-ui/react"; // plasmic-import: HLUu2WOBeMD/codeComponent
import { TableContainer } from "@chakra-ui/react"; // plasmic-import: jtvMEgcc8Aw/codeComponent
import { Thead } from "@chakra-ui/react"; // plasmic-import: KKgi62Z_4DE/codeComponent
import { Tr } from "@chakra-ui/react"; // plasmic-import: MNOjMWHLkbh/codeComponent
import { Th } from "@chakra-ui/react"; // plasmic-import: gWP0O1jXZqj/codeComponent
import { Tbody } from "@chakra-ui/react"; // plasmic-import: 6dRhHGyh06q/codeComponent
import { Td } from "@chakra-ui/react"; // plasmic-import: RHC1VkJQ4Mf/codeComponent
import { Toast } from "@chakra-ui/react"; // plasmic-import: oF3Q0B0lIxX/codeComponent
import { Tooltip } from "@chakra-ui/react"; // plasmic-import: Sn-AzxkTHAx/codeComponent
import { WondervilleIcon } from "@chakra-ui/react"; // plasmic-import: xsFij1nAGFs/codeComponent
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: S_mxCSCBIt/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: ccAPfW3XfEkPVBiJWBPNXX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: H8WLATolXXZm/css

import InterfaceIconIcon from "./icons/PlasmicIcon__InterfaceIcon"; // plasmic-import: HbrlDd-vrN/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  hoverIndicator2?: p.Flex<"div">;
  accordion?: p.Flex<typeof Accordion>;
  accordionButton?: p.Flex<typeof AccordionButton>;
  accordionIcon?: p.Flex<typeof AccordionIcon>;
  accordionPanel?: p.Flex<typeof AccordionPanel>;
  arcadeIcon?: p.Flex<typeof ArcadeIcon>;
  avatar?: p.Flex<typeof Avatar>;
  badge?: p.Flex<typeof Badge>;
  bowlingIcon?: p.Flex<typeof BowlingIcon>;
  breadcrumb?: p.Flex<typeof Breadcrumb>;
  buttonGroup?: p.Flex<typeof ButtonGroup>;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
  card?: p.Flex<typeof Card>;
  cardHeader?: p.Flex<typeof CardHeader>;
  cardBody?: p.Flex<typeof CardBody>;
  cardFooter?: p.Flex<typeof CardFooter>;
  checkbox?: p.Flex<typeof Checkbox>;
  checkboxGroup?: p.Flex<typeof CheckboxGroup>;
  divider?: p.Flex<typeof Divider>;
  escaperoomIcon?: p.Flex<typeof EscaperoomIcon>;
  formControl?: p.Flex<typeof FormControl>;
  funPassIcon?: p.Flex<typeof FunPassIcon>;
  golfIcon?: p.Flex<typeof GolfIcon>;
  heading?: p.Flex<typeof Heading>;
  highlight?: p.Flex<typeof Highlight>;
  hijinxIcon?: p.Flex<typeof HijinxIcon>;
  image?: p.Flex<typeof Image>;
  imageWithOverlay?: p.Flex<typeof ImageWithOverlay>;
  input?: p.Flex<typeof Input>;
  karaokeIcon?: p.Flex<typeof KaraokeIcon>;
  laserIcon?: p.Flex<typeof LaserIcon>;
  locationPinIcon?: p.Flex<typeof LocationPinIcon>;
  numberInput?: p.Flex<typeof NumberInput>;
  option?: p.Flex<typeof Option>;
  pinInput?: p.Flex<typeof PinInput>;
  progress?: p.Flex<typeof Progress>;
  radio?: p.Flex<typeof Radio>;
  select?: p.Flex<typeof Select>;
  stat?: p.Flex<typeof Stat>;
  _switch?: p.Flex<typeof Switch>;
  tabs?: p.Flex<typeof Tabs>;
  table?: p.Flex<typeof Table>;
  tableContainer?: p.Flex<typeof TableContainer>;
  toast?: p.Flex<typeof Toast>;
  tooltip?: p.Flex<typeof Tooltip>;
  wondervilleIcon?: p.Flex<typeof WondervilleIcon>;
  aspectRatio?: p.Flex<typeof AspectRatio>;
  hoverIndicator?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <Button
              className={classNames("__wab_instance", sty.button___5Noq)}
              isLoading={false}
              size={"lg" as const}
              variant={"primary" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vR4U8
                )}
              >
                {"Button"}
              </div>
            </Button>

            <div
              data-plasmic-name={"hoverIndicator2"}
              data-plasmic-override={overrides.hoverIndicator2}
              className={classNames(projectcss.all, sty.hoverIndicator2)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__rRvv)}
                displayHeight={"80px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"80px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/token_studio_chakra/images/group938.svg",
                  fullWidth: 80,
                  fullHeight: 80,
                  aspectRatio: 1
                }}
              />

              <InterfaceIconIcon
                className={classNames(projectcss.all, sty.svg___3X8Eb)}
                role={"img"}
              />
            </div>

            <Accordion
              data-plasmic-name={"accordion"}
              data-plasmic-override={overrides.accordion}
              className={classNames("__wab_instance", sty.accordion)}
            >
              <AccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__odMol
                )}
              >
                <AccordionButton
                  data-plasmic-name={"accordionButton"}
                  data-plasmic-override={overrides.accordionButton}
                  className={classNames("__wab_instance", sty.accordionButton)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rs0Ce
                    )}
                  >
                    {"Section 1 title"}
                  </div>

                  <AccordionIcon
                    data-plasmic-name={"accordionIcon"}
                    data-plasmic-override={overrides.accordionIcon}
                    className={classNames("__wab_instance", sty.accordionIcon)}
                  />
                </AccordionButton>

                <AccordionPanel
                  data-plasmic-name={"accordionPanel"}
                  data-plasmic-override={overrides.accordionPanel}
                  className={classNames("__wab_instance", sty.accordionPanel)}
                >
                  <Text
                    className={classNames("__wab_instance", sty.text__xaiDe)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9A4Wv
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                      }
                    </div>
                  </Text>
                </AccordionPanel>
              </AccordionItem>

              <AccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__eDyIt
                )}
              >
                <AccordionButton
                  className={classNames(
                    "__wab_instance",
                    sty.accordionButton__rNrYs
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f3FHb
                    )}
                  >
                    {"Section 1 title"}
                  </div>

                  <AccordionIcon
                    className={classNames(
                      "__wab_instance",
                      sty.accordionIcon__wVcKa
                    )}
                  />
                </AccordionButton>

                <AccordionPanel
                  className={classNames(
                    "__wab_instance",
                    sty.accordionPanel__dir95
                  )}
                >
                  <Text
                    className={classNames("__wab_instance", sty.text__cRVt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tZ0Iy
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                      }
                    </div>
                  </Text>
                </AccordionPanel>
              </AccordionItem>
            </Accordion>

            <ArcadeIcon
              data-plasmic-name={"arcadeIcon"}
              data-plasmic-override={overrides.arcadeIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.arcadeIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <Avatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar)}
              name={"Kola Tioluwani" as const}
              src={"https://bit.ly/dan-abramov" as const}
            >
              <AvatarBadge
                bg={"green.500" as const}
                boxSize={"1.25em" as const}
                className={classNames("__wab_instance", sty.avatarBadge__iZw6)}
              />
            </Avatar>

            <Badge
              data-plasmic-name={"badge"}
              data-plasmic-override={overrides.badge}
              className={classNames("__wab_instance", sty.badge)}
              colorScheme={"gray" as const}
              variant={"subtle" as const}
            />

            <BowlingIcon
              data-plasmic-name={"bowlingIcon"}
              data-plasmic-override={overrides.bowlingIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.bowlingIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <Breadcrumb
              data-plasmic-name={"breadcrumb"}
              data-plasmic-override={overrides.breadcrumb}
              className={classNames("__wab_instance", sty.breadcrumb)}
              separator={"/" as const}
              spacing={"8px" as const}
            >
              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__uxEg4
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__fpAh
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gllxi
                    )}
                  >
                    {"Home"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__nbe0E
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__hhkzX
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zN3Y
                    )}
                  >
                    {"Docs"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__fiFIx
                )}
                isCurrentPage={true}
                isLastChild={true}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__jda2
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iuWed
                    )}
                  >
                    {"Breadcrumb"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>
            </Breadcrumb>

            <Button
              className={classNames("__wab_instance", sty.button__vV8Ye)}
              variant={"primary" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nfd9G
                )}
              >
                {"Button"}
              </div>
            </Button>

            <ButtonGroup
              data-plasmic-name={"buttonGroup"}
              data-plasmic-override={overrides.buttonGroup}
              className={classNames("__wab_instance", sty.buttonGroup)}
              isAttached={false}
              isDisabled={false}
              size={"md" as const}
              spacing={"0.5rem" as const}
            >
              <Button
                className={classNames("__wab_instance", sty.button__yTtGt)}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tBmjp
                  )}
                >
                  {"Button 1"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__cFfn)}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dF8Zd
                  )}
                >
                  {"Button 2"}
                </div>
              </Button>
            </ButtonGroup>

            <ButtonPreview
              data-plasmic-name={"buttonPreview"}
              data-plasmic-override={overrides.buttonPreview}
              className={classNames("__wab_instance", sty.buttonPreview)}
            />

            <Card
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames("__wab_instance", sty.card)}
              variant={"primary" as const}
            >
              <CardHeader
                data-plasmic-name={"cardHeader"}
                data-plasmic-override={overrides.cardHeader}
                className={classNames("__wab_instance", sty.cardHeader)}
              >
                <ImageWithOverlay
                  className={classNames(
                    "__wab_instance",
                    sty.imageWithOverlay__pWsRp
                  )}
                >
                  <Heading
                    className={classNames("__wab_instance", sty.heading__jw9Hc)}
                    noOfLines={1 as const}
                    size={"4xl" as const}
                  />
                </ImageWithOverlay>
              </CardHeader>

              <CardBody
                data-plasmic-name={"cardBody"}
                data-plasmic-override={overrides.cardBody}
                className={classNames("__wab_instance", sty.cardBody)}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__nTKgM)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__ftUd
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__ch00X
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___81SDd
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__iZd0L
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__m6WAs
                    )}
                  />
                </Tag>

                <Tag
                  className={classNames("__wab_instance", sty.tag___3H56F)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__ae5Yo
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__lkdpk
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z8Zq
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__ippLw
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__mjIng
                    )}
                  />
                </Tag>

                <Tag
                  className={classNames("__wab_instance", sty.tag__vHtDk)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__jm6Ns
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__a19Wy
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qj6Fp
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__q3P3N
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__ie8Ze
                    )}
                  />
                </Tag>

                <Tag
                  className={classNames("__wab_instance", sty.tag__eaKc2)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon___1SVL
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel___83H5S
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b6B2A
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__h2CT1
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__ulJyp
                    )}
                  />
                </Tag>

                <Tag
                  className={classNames("__wab_instance", sty.tag__kgT8)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__dQWo
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__orMZm
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ckDBw
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__iwu9W
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__iwCVi
                    )}
                  />
                </Tag>

                <Tag
                  className={classNames("__wab_instance", sty.tag___1XeK)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__h7STv
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__fdEsn
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w3Ho
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__uQh3
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton___6DiRz
                    )}
                  />
                </Tag>

                <Text className={classNames("__wab_instance", sty.text__oGfPh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hMlCq
                    )}
                  >
                    {"Some Text"}
                  </div>
                </Text>
              </CardBody>

              <CardFooter
                data-plasmic-name={"cardFooter"}
                data-plasmic-override={overrides.cardFooter}
                className={classNames("__wab_instance", sty.cardFooter)}
              >
                <Stack
                  className={classNames("__wab_instance", sty.stack___7ZkVc)}
                  direction={"row" as const}
                  spacing={8 as const}
                >
                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton__jGtL4
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__lesAd
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    variant={"solid" as const}
                  />

                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton__gqmg8
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__cYxnb
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    size={"md" as const}
                    variant={"solid" as const}
                  />

                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton___4YVme
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__oYk3E
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    variant={"solid" as const}
                  />

                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton___3GqN2
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__axiRk
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    variant={"solid" as const}
                  />

                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton___7U4E9
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__oehIe
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    variant={"solid" as const}
                  />

                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton__aqVVr
                    )}
                    icon={
                      <GolfIcon
                        boxSize={"1em" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.golfIcon__aPqAk
                        )}
                        color={"currentColor" as const}
                        focusable={false}
                        viewBox={"0 0 32 32" as const}
                      />
                    }
                    isRound={true}
                    variant={"solid" as const}
                  />
                </Stack>

                <Tag
                  className={classNames("__wab_instance", sty.tag__zPsJs)}
                  spacing={"24px" as const}
                >
                  <TagLeftIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagLeftIcon__cpIgq
                    )}
                  />

                  <TagLabel
                    className={classNames(
                      "__wab_instance",
                      sty.tagLabel__zRoTv
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o3A5I
                      )}
                    >
                      {"Tag"}
                    </div>
                  </TagLabel>

                  <TagRightIcon
                    className={classNames(
                      "__wab_instance",
                      sty.tagRightIcon__bYVc
                    )}
                  />

                  <TagCloseButton
                    className={classNames(
                      "__wab_instance",
                      sty.tagCloseButton__sUsXe
                    )}
                  />
                </Tag>
              </CardFooter>
            </Card>

            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              colorScheme={"blue" as const}
              spacing={"0.5rem" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aVwz
                )}
              >
                {"Checkbox"}
              </div>
            </Checkbox>

            <CheckboxGroup
              data-plasmic-name={"checkboxGroup"}
              data-plasmic-override={overrides.checkboxGroup}
              className={classNames("__wab_instance", sty.checkboxGroup)}
              size={"md" as const}
            >
              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__wdAE)}
                colorScheme={"blue" as const}
                spacing={"0.5rem" as const}
                value={"1" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__muf03
                  )}
                >
                  {"Checkbox 1"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__omnBk)}
                colorScheme={"blue" as const}
                spacing={"0.5rem" as const}
                value={"2" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o1Esv
                  )}
                >
                  {"Checkbox 2"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__zNLg)}
                colorScheme={"blue" as const}
                spacing={"0.5rem" as const}
                value={"3" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sNpiY
                  )}
                >
                  {"Checkbox 3"}
                </div>
              </Checkbox>
            </CheckboxGroup>

            <Divider
              data-plasmic-name={"divider"}
              data-plasmic-override={overrides.divider}
              className={classNames("__wab_instance", sty.divider)}
            />

            <EscaperoomIcon
              data-plasmic-name={"escaperoomIcon"}
              data-plasmic-override={overrides.escaperoomIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.escaperoomIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <FormControl
              data-plasmic-name={"formControl"}
              data-plasmic-override={overrides.formControl}
              className={classNames("__wab_instance", sty.formControl)}
            >
              <FormLabel
                className={classNames("__wab_instance", sty.formLabel__kNzT)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mq614
                  )}
                >
                  {"Label"}
                </div>
              </FormLabel>

              <Input
                className={classNames("__wab_instance", sty.input__uxkJv)}
                errorBorderColor={"red.500" as const}
                focusBorderColor={"blue.500" as const}
              />
            </FormControl>

            <FunPassIcon
              data-plasmic-name={"funPassIcon"}
              data-plasmic-override={overrides.funPassIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.funPassIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <GolfIcon
              data-plasmic-name={"golfIcon"}
              data-plasmic-override={overrides.golfIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.golfIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <Heading
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames("__wab_instance", sty.heading)}
              noOfLines={1 as const}
              size={"xl" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gnDsr
                )}
              >
                {
                  "Headings and other basic text writing including, body text, lists, and more."
                }
              </div>
            </Heading>

            <Highlight
              data-plasmic-name={"highlight"}
              data-plasmic-override={overrides.highlight}
              className={classNames("__wab_instance", sty.highlight)}
              query={["Spotlight", "words"]}
              styles={{
                backgroundColor: "orange.100",
                px: "0.3em",
                py: "0.1em",
                borderRadius: "0.3em"
              }}
            >
              {
                "With the Highlight component, you can spotlight words." as const
              }
            </Highlight>

            <HijinxIcon
              data-plasmic-name={"hijinxIcon"}
              data-plasmic-override={overrides.hijinxIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.hijinxIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <Image
              data-plasmic-name={"image"}
              data-plasmic-override={overrides.image}
              className={classNames("__wab_instance", sty.image)}
              fallbackSrc={"https://via.placeholder.com/150" as const}
              src={"https://bit.ly/naruto-sage" as const}
            />

            <ImageWithOverlay
              data-plasmic-name={"imageWithOverlay"}
              data-plasmic-override={overrides.imageWithOverlay}
              className={classNames("__wab_instance", sty.imageWithOverlay)}
            >
              <Heading
                className={classNames("__wab_instance", sty.heading__nEcKl)}
                noOfLines={1 as const}
                size={"4xl" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wZeBm
                  )}
                >
                  {
                    "Headings and other basic text writing including, body text, lists, and more."
                  }
                </div>
              </Heading>
            </ImageWithOverlay>

            <Input
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              className={classNames("__wab_instance", sty.input)}
              errorBorderColor={"red.500" as const}
              focusBorderColor={"blue.500" as const}
            />

            <KaraokeIcon
              data-plasmic-name={"karaokeIcon"}
              data-plasmic-override={overrides.karaokeIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.karaokeIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <LaserIcon
              data-plasmic-name={"laserIcon"}
              data-plasmic-override={overrides.laserIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.laserIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <LocationPinIcon
              data-plasmic-name={"locationPinIcon"}
              data-plasmic-override={overrides.locationPinIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.locationPinIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <NumberInput
              data-plasmic-name={"numberInput"}
              data-plasmic-override={overrides.numberInput}
              className={classNames("__wab_instance", sty.numberInput)}
              errorBorderColor={"red.500" as const}
              focusBorderColor={"blue.500" as const}
            >
              <NumberInputField
                className={classNames(
                  "__wab_instance",
                  sty.numberInputField__hivuq
                )}
              />

              <NumberInputStepper
                className={classNames(
                  "__wab_instance",
                  sty.numberInputStepper___7QR5
                )}
              >
                <NumberIncrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberIncrementStepper__la9V
                  )}
                />

                <NumberDecrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberDecrementStepper__i4RwS
                  )}
                />
              </NumberInputStepper>
            </NumberInput>

            <Option
              data-plasmic-name={"option"}
              data-plasmic-override={overrides.option}
              className={classNames("__wab_instance", sty.option)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x7VYy
                )}
              >
                {"Option"}
              </div>
            </Option>

            <PinInput
              data-plasmic-name={"pinInput"}
              data-plasmic-override={overrides.pinInput}
              className={classNames("__wab_instance", sty.pinInput)}
              errorBorderColor={"red.500" as const}
              focusBorderColor={"blue.500" as const}
              manageFocus={true}
            >
              <PinInputField
                className={classNames(
                  "__wab_instance",
                  sty.pinInputField__mPoSl
                )}
              />

              <PinInputField
                className={classNames(
                  "__wab_instance",
                  sty.pinInputField__ePcn
                )}
              />

              <PinInputField
                className={classNames(
                  "__wab_instance",
                  sty.pinInputField__d7DwT
                )}
              />

              <PinInputField
                className={classNames(
                  "__wab_instance",
                  sty.pinInputField__q0JH
                )}
              />
            </PinInput>

            <Progress
              data-plasmic-name={"progress"}
              data-plasmic-override={overrides.progress}
              className={classNames("__wab_instance", sty.progress)}
              colorScheme={"blue" as const}
              max={100 as const}
              min={0 as const}
              size={"md" as const}
            />

            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup__l7N21)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jvwm3)}
              >
                <Radio
                  className={classNames("__wab_instance", sty.radio__eJtzs)}
                  spacing={"0.5rem" as const}
                  value={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Wkr4
                    )}
                  >
                    {"Radio 1"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__xbQpy)}
                  spacing={"0.5rem" as const}
                  value={"2" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cvtvh
                    )}
                  >
                    {"Radio 2"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__k7Dy)}
                  spacing={"0.5rem" as const}
                  value={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ktrXx
                    )}
                  >
                    {"Radio 3"}
                  </div>
                </Radio>
              </p.Stack>
            </RadioGroup>

            <Radio
              data-plasmic-name={"radio"}
              data-plasmic-override={overrides.radio}
              className={classNames("__wab_instance", sty.radio)}
              spacing={"0.5rem" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r0DE
                )}
              >
                {"Radio"}
              </div>
            </Radio>

            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup___6Iv1A)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cZwFd)}
              >
                <Radio
                  className={classNames("__wab_instance", sty.radio__mFqca)}
                  spacing={"0.5rem" as const}
                  value={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yvRv
                    )}
                  >
                    {"Radio 1"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__qSsB)}
                  spacing={"0.5rem" as const}
                  value={"2" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oxN4
                    )}
                  >
                    {"Radio 2"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__cObBs)}
                  spacing={"0.5rem" as const}
                  value={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__chFWx
                    )}
                  >
                    {"Radio 3"}
                  </div>
                </Radio>
              </p.Stack>
            </RadioGroup>

            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              size={"md" as const}
              variant={"outline" as const}
            >
              <Option
                className={classNames("__wab_instance", sty.option__gufQh)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uh5Yu
                  )}
                >
                  {"Option 01"}
                </div>
              </Option>

              <Option
                className={classNames("__wab_instance", sty.option__kxZw6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7CySk
                  )}
                >
                  {"Option 02"}
                </div>
              </Option>

              <Option
                className={classNames("__wab_instance", sty.option__teZTe)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5Hvss
                  )}
                >
                  {"Option 03"}
                </div>
              </Option>
            </Select>

            <Stack
              className={classNames("__wab_instance", sty.stack__mudse)}
              direction={"row" as const}
              spacing={8 as const}
            />

            <Stat
              data-plasmic-name={"stat"}
              data-plasmic-override={overrides.stat}
              className={classNames("__wab_instance", sty.stat)}
            >
              <StatLabel
                className={classNames("__wab_instance", sty.statLabel___64CiS)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3Rrgs
                  )}
                >
                  {"Collected Fees"}
                </div>
              </StatLabel>

              <StatNumber
                className={classNames("__wab_instance", sty.statNumber__fiBu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4TIp2
                  )}
                >
                  {"£345,670"}
                </div>
              </StatNumber>

              <StatHelpText
                className={classNames(
                  "__wab_instance",
                  sty.statHelpText__iWeV9
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__jd5Pp)}>
                  <StatArrow
                    className={classNames(
                      "__wab_instance",
                      sty.statArrow__lhSy5
                    )}
                    type={"increase" as const}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c0NDb
                    )}
                  >
                    {"Last 7 days"}
                  </div>
                </div>
              </StatHelpText>
            </Stat>

            <Switch
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              className={classNames("__wab_instance", sty._switch)}
              colorScheme={"blue" as const}
              size={"md" as const}
              spacing={"0.5rem" as const}
            />

            <Tabs
              data-plasmic-name={"tabs"}
              data-plasmic-override={overrides.tabs}
              className={classNames("__wab_instance", sty.tabs)}
              variant={"line" as const}
            >
              <TabList
                className={classNames("__wab_instance", sty.tabList__i0MYo)}
              >
                <Tab className={classNames("__wab_instance", sty.tab__y0Lwj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c0Co
                    )}
                  >
                    {"Tab 1"}
                  </div>
                </Tab>

                <Tab className={classNames("__wab_instance", sty.tab__upt0)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w6Jq
                    )}
                  >
                    {"Tab 2"}
                  </div>
                </Tab>

                <Tab className={classNames("__wab_instance", sty.tab__vVk6O)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tnA3
                    )}
                  >
                    {"Tab 3"}
                  </div>
                </Tab>
              </TabList>

              <TabPanels
                className={classNames("__wab_instance", sty.tabPanels__effle)}
              >
                <TabPanel
                  className={classNames("__wab_instance", sty.tabPanel___7PGrT)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hVmcj
                    )}
                  >
                    {"Tab 1's Panel Content"}
                  </div>
                </TabPanel>

                <TabPanel
                  className={classNames("__wab_instance", sty.tabPanel__ycHvN)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fClXz
                    )}
                  >
                    {"Tab 2's Panel Content"}
                  </div>
                </TabPanel>

                <TabPanel
                  className={classNames("__wab_instance", sty.tabPanel__cDSq5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z08Hn
                    )}
                  >
                    {"Tab 3's Panel Content"}
                  </div>
                </TabPanel>
              </TabPanels>
            </Tabs>

            <Tag
              className={classNames("__wab_instance", sty.tag__aIq7O)}
              spacing={"24px" as const}
            >
              <TagLeftIcon
                className={classNames("__wab_instance", sty.tagLeftIcon__fws83)}
              >
                <GolfIcon
                  boxSize={"1em" as const}
                  className={classNames("__wab_instance", sty.golfIcon__qX3U3)}
                  color={"currentColor" as const}
                  focusable={false}
                  viewBox={"0 0 32 32" as const}
                />
              </TagLeftIcon>

              <TagLabel
                className={classNames("__wab_instance", sty.tagLabel__nObf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oFGq
                  )}
                >
                  {"Tag"}
                </div>
              </TagLabel>

              <TagRightIcon
                className={classNames("__wab_instance", sty.tagRightIcon__vpal)}
              >
                <GolfIcon
                  boxSize={"1em" as const}
                  className={classNames("__wab_instance", sty.golfIcon__dggGb)}
                  color={"currentColor" as const}
                  focusable={false}
                  viewBox={"0 0 32 32" as const}
                />
              </TagRightIcon>

              <TagCloseButton
                className={classNames(
                  "__wab_instance",
                  sty.tagCloseButton__giOnt
                )}
              />
            </Tag>

            <Table
              data-plasmic-name={"table"}
              data-plasmic-override={overrides.table}
              className={classNames("__wab_instance", sty.table)}
              colorScheme={"gray" as const}
              size={"md" as const}
              variant={"simple" as const}
            >
              <TableContainer
                data-plasmic-name={"tableContainer"}
                data-plasmic-override={overrides.tableContainer}
                className={classNames("__wab_instance", sty.tableContainer)}
              >
                <Table
                  className={classNames("__wab_instance", sty.table__izpVw)}
                  colorScheme={"gray" as const}
                  size={"md" as const}
                  variant={"simple" as const}
                >
                  <Thead
                    className={classNames("__wab_instance", sty.thead__tftLo)}
                  >
                    <Tr className={classNames("__wab_instance", sty.tr__peg21)}>
                      <Th
                        className={classNames("__wab_instance", sty.th__h0Gjk)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lpwBb
                          )}
                        >
                          {"TO CONVERT"}
                        </div>
                      </Th>

                      <Th
                        className={classNames("__wab_instance", sty.th__ppnEc)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gsDEs
                          )}
                        >
                          {"INTO"}
                        </div>
                      </Th>

                      <Th
                        className={classNames("__wab_instance", sty.th__d8Vsl)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zLhu
                          )}
                        >
                          {"MULTIPLY BY"}
                        </div>
                      </Th>
                    </Tr>
                  </Thead>

                  <Tbody
                    className={classNames("__wab_instance", sty.tbody___47WyU)}
                  >
                    <Tr className={classNames("__wab_instance", sty.tr__k2Vas)}>
                      <Td
                        className={classNames("__wab_instance", sty.td___68Iy)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nvJfE
                          )}
                        >
                          {"inches"}
                        </div>
                      </Td>

                      <Td
                        className={classNames("__wab_instance", sty.td__slrss)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___88IrE
                          )}
                        >
                          {"millimetres (mm)"}
                        </div>
                      </Td>

                      <Td
                        className={classNames("__wab_instance", sty.td__tUoZx)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s3F
                          )}
                        >
                          {"25.4"}
                        </div>
                      </Td>
                    </Tr>
                  </Tbody>
                </Table>
              </TableContainer>
            </Table>

            <Toast
              data-plasmic-name={"toast"}
              data-plasmic-override={overrides.toast}
              className={classNames("__wab_instance", sty.toast)}
              description={"Toast description" as const}
              duration={5000 as const}
              title={"Toast Title" as const}
            />

            <Tooltip
              data-plasmic-name={"tooltip"}
              data-plasmic-override={overrides.tooltip}
              arrowPadding={8 as const}
              arrowSize={10 as const}
              className={classNames("__wab_instance", sty.tooltip)}
              closeDelay={0 as const}
              closeOnClick={true}
              label={"Hi! I am a tooltip" as const}
              offset={[0, 0]}
              placement={"bottom" as const}
            >
              <Button
                className={classNames("__wab_instance", sty.button__kHil)}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wwdZn
                  )}
                >
                  {"Hover me"}
                </div>
              </Button>
            </Tooltip>

            <WondervilleIcon
              data-plasmic-name={"wondervilleIcon"}
              data-plasmic-override={overrides.wondervilleIcon}
              boxSize={"1em" as const}
              className={classNames("__wab_instance", sty.wondervilleIcon)}
              color={"currentColor" as const}
              focusable={false}
              viewBox={"0 0 32 32" as const}
            />

            <AspectRatio
              data-plasmic-name={"aspectRatio"}
              data-plasmic-override={overrides.aspectRatio}
              className={classNames("__wab_instance", sty.aspectRatio)}
              ratio={1.333 as const}
            >
              <Image
                className={classNames("__wab_instance", sty.image__le4Wx)}
                fallbackSrc={"https://via.placeholder.com/150" as const}
                src={"https://bit.ly/naruto-sage" as const}
              />
            </AspectRatio>

            <div
              data-plasmic-name={"hoverIndicator"}
              data-plasmic-override={overrides.hoverIndicator}
              className={classNames(projectcss.all, sty.hoverIndicator)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ra3W8)}
                displayHeight={"80px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"80px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/token_studio_chakra/images/group938.svg",
                  fullWidth: 80,
                  fullHeight: 80,
                  aspectRatio: 1
                }}
              />

              <InterfaceIconIcon
                className={classNames(projectcss.all, sty.svg__m1GB)}
                role={"img"}
              />
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "hoverIndicator2",
    "accordion",
    "accordionButton",
    "accordionIcon",
    "accordionPanel",
    "arcadeIcon",
    "avatar",
    "badge",
    "bowlingIcon",
    "breadcrumb",
    "buttonGroup",
    "buttonPreview",
    "card",
    "cardHeader",
    "cardBody",
    "cardFooter",
    "checkbox",
    "checkboxGroup",
    "divider",
    "escaperoomIcon",
    "formControl",
    "funPassIcon",
    "golfIcon",
    "heading",
    "highlight",
    "hijinxIcon",
    "image",
    "imageWithOverlay",
    "input",
    "karaokeIcon",
    "laserIcon",
    "locationPinIcon",
    "numberInput",
    "option",
    "pinInput",
    "progress",
    "radio",
    "select",
    "stat",
    "_switch",
    "tabs",
    "table",
    "tableContainer",
    "toast",
    "tooltip",
    "wondervilleIcon",
    "aspectRatio",
    "hoverIndicator"
  ],
  section: [
    "section",
    "hoverIndicator2",
    "accordion",
    "accordionButton",
    "accordionIcon",
    "accordionPanel",
    "arcadeIcon",
    "avatar",
    "badge",
    "bowlingIcon",
    "breadcrumb",
    "buttonGroup",
    "buttonPreview",
    "card",
    "cardHeader",
    "cardBody",
    "cardFooter",
    "checkbox",
    "checkboxGroup",
    "divider",
    "escaperoomIcon",
    "formControl",
    "funPassIcon",
    "golfIcon",
    "heading",
    "highlight",
    "hijinxIcon",
    "image",
    "imageWithOverlay",
    "input",
    "karaokeIcon",
    "laserIcon",
    "locationPinIcon",
    "numberInput",
    "option",
    "pinInput",
    "progress",
    "radio",
    "select",
    "stat",
    "_switch",
    "tabs",
    "table",
    "tableContainer",
    "toast",
    "tooltip",
    "wondervilleIcon",
    "aspectRatio",
    "hoverIndicator"
  ],
  hoverIndicator2: ["hoverIndicator2"],
  accordion: [
    "accordion",
    "accordionButton",
    "accordionIcon",
    "accordionPanel"
  ],
  accordionButton: ["accordionButton", "accordionIcon"],
  accordionIcon: ["accordionIcon"],
  accordionPanel: ["accordionPanel"],
  arcadeIcon: ["arcadeIcon"],
  avatar: ["avatar"],
  badge: ["badge"],
  bowlingIcon: ["bowlingIcon"],
  breadcrumb: ["breadcrumb"],
  buttonGroup: ["buttonGroup"],
  buttonPreview: ["buttonPreview"],
  card: ["card", "cardHeader", "cardBody", "cardFooter"],
  cardHeader: ["cardHeader"],
  cardBody: ["cardBody"],
  cardFooter: ["cardFooter"],
  checkbox: ["checkbox"],
  checkboxGroup: ["checkboxGroup"],
  divider: ["divider"],
  escaperoomIcon: ["escaperoomIcon"],
  formControl: ["formControl"],
  funPassIcon: ["funPassIcon"],
  golfIcon: ["golfIcon"],
  heading: ["heading"],
  highlight: ["highlight"],
  hijinxIcon: ["hijinxIcon"],
  image: ["image"],
  imageWithOverlay: ["imageWithOverlay"],
  input: ["input"],
  karaokeIcon: ["karaokeIcon"],
  laserIcon: ["laserIcon"],
  locationPinIcon: ["locationPinIcon"],
  numberInput: ["numberInput"],
  option: ["option"],
  pinInput: ["pinInput"],
  progress: ["progress"],
  radio: ["radio"],
  select: ["select"],
  stat: ["stat"],
  _switch: ["_switch"],
  tabs: ["tabs"],
  table: ["table", "tableContainer"],
  tableContainer: ["tableContainer"],
  toast: ["toast"],
  tooltip: ["tooltip"],
  wondervilleIcon: ["wondervilleIcon"],
  aspectRatio: ["aspectRatio"],
  hoverIndicator: ["hoverIndicator"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  hoverIndicator2: "div";
  accordion: typeof Accordion;
  accordionButton: typeof AccordionButton;
  accordionIcon: typeof AccordionIcon;
  accordionPanel: typeof AccordionPanel;
  arcadeIcon: typeof ArcadeIcon;
  avatar: typeof Avatar;
  badge: typeof Badge;
  bowlingIcon: typeof BowlingIcon;
  breadcrumb: typeof Breadcrumb;
  buttonGroup: typeof ButtonGroup;
  buttonPreview: typeof ButtonPreview;
  card: typeof Card;
  cardHeader: typeof CardHeader;
  cardBody: typeof CardBody;
  cardFooter: typeof CardFooter;
  checkbox: typeof Checkbox;
  checkboxGroup: typeof CheckboxGroup;
  divider: typeof Divider;
  escaperoomIcon: typeof EscaperoomIcon;
  formControl: typeof FormControl;
  funPassIcon: typeof FunPassIcon;
  golfIcon: typeof GolfIcon;
  heading: typeof Heading;
  highlight: typeof Highlight;
  hijinxIcon: typeof HijinxIcon;
  image: typeof Image;
  imageWithOverlay: typeof ImageWithOverlay;
  input: typeof Input;
  karaokeIcon: typeof KaraokeIcon;
  laserIcon: typeof LaserIcon;
  locationPinIcon: typeof LocationPinIcon;
  numberInput: typeof NumberInput;
  option: typeof Option;
  pinInput: typeof PinInput;
  progress: typeof Progress;
  radio: typeof Radio;
  select: typeof Select;
  stat: typeof Stat;
  _switch: typeof Switch;
  tabs: typeof Tabs;
  table: typeof Table;
  tableContainer: typeof TableContainer;
  toast: typeof Toast;
  tooltip: typeof Tooltip;
  wondervilleIcon: typeof WondervilleIcon;
  aspectRatio: typeof AspectRatio;
  hoverIndicator: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    hoverIndicator2: makeNodeComponent("hoverIndicator2"),
    accordion: makeNodeComponent("accordion"),
    accordionButton: makeNodeComponent("accordionButton"),
    accordionIcon: makeNodeComponent("accordionIcon"),
    accordionPanel: makeNodeComponent("accordionPanel"),
    arcadeIcon: makeNodeComponent("arcadeIcon"),
    avatar: makeNodeComponent("avatar"),
    badge: makeNodeComponent("badge"),
    bowlingIcon: makeNodeComponent("bowlingIcon"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    buttonGroup: makeNodeComponent("buttonGroup"),
    buttonPreview: makeNodeComponent("buttonPreview"),
    card: makeNodeComponent("card"),
    cardHeader: makeNodeComponent("cardHeader"),
    cardBody: makeNodeComponent("cardBody"),
    cardFooter: makeNodeComponent("cardFooter"),
    checkbox: makeNodeComponent("checkbox"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    divider: makeNodeComponent("divider"),
    escaperoomIcon: makeNodeComponent("escaperoomIcon"),
    formControl: makeNodeComponent("formControl"),
    funPassIcon: makeNodeComponent("funPassIcon"),
    golfIcon: makeNodeComponent("golfIcon"),
    heading: makeNodeComponent("heading"),
    highlight: makeNodeComponent("highlight"),
    hijinxIcon: makeNodeComponent("hijinxIcon"),
    image: makeNodeComponent("image"),
    imageWithOverlay: makeNodeComponent("imageWithOverlay"),
    input: makeNodeComponent("input"),
    karaokeIcon: makeNodeComponent("karaokeIcon"),
    laserIcon: makeNodeComponent("laserIcon"),
    locationPinIcon: makeNodeComponent("locationPinIcon"),
    numberInput: makeNodeComponent("numberInput"),
    option: makeNodeComponent("option"),
    pinInput: makeNodeComponent("pinInput"),
    progress: makeNodeComponent("progress"),
    radio: makeNodeComponent("radio"),
    select: makeNodeComponent("select"),
    stat: makeNodeComponent("stat"),
    _switch: makeNodeComponent("_switch"),
    tabs: makeNodeComponent("tabs"),
    table: makeNodeComponent("table"),
    tableContainer: makeNodeComponent("tableContainer"),
    toast: makeNodeComponent("toast"),
    tooltip: makeNodeComponent("tooltip"),
    wondervilleIcon: makeNodeComponent("wondervilleIcon"),
    aspectRatio: makeNodeComponent("aspectRatio"),
    hoverIndicator: makeNodeComponent("hoverIndicator"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
