// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4hCq2yK3sCmAagxeN2rvEp
// Component: ToaxRzJEOz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_chakra_docs_test.module.css"; // plasmic-import: 4hCq2yK3sCmAagxeN2rvEp/projectcss
import sty from "./PlasmicDesignTokenItem.module.css"; // plasmic-import: ToaxRzJEOz/css

export type PlasmicDesignTokenItem__VariantMembers = {
  color: "color";
  bordeRadius: "bordeRadius";
  borderWidth: "borderWidth";
  boxShadow: "boxShadow";
  fontFamily: "fontFamily";
  fontSize: "fontSize";
  fontWeight: "fontWeight";
  lineHieight: "lineHieight";
  radii: "radii";
  sizing: "sizing";
  spacing: "spacing";
  opacity: "opacity";
  letterSpacing: "letterSpacing";
  textCase: "textCase";
  textDecoration: "textDecoration";
};
export type PlasmicDesignTokenItem__VariantsArgs = {
  color?: SingleBooleanChoiceArg<"color">;
  bordeRadius?: SingleBooleanChoiceArg<"bordeRadius">;
  borderWidth?: SingleBooleanChoiceArg<"borderWidth">;
  boxShadow?: SingleBooleanChoiceArg<"boxShadow">;
  fontFamily?: SingleBooleanChoiceArg<"fontFamily">;
  fontSize?: SingleBooleanChoiceArg<"fontSize">;
  fontWeight?: SingleBooleanChoiceArg<"fontWeight">;
  lineHieight?: SingleBooleanChoiceArg<"lineHieight">;
  radii?: SingleBooleanChoiceArg<"radii">;
  sizing?: SingleBooleanChoiceArg<"sizing">;
  spacing?: SingleBooleanChoiceArg<"spacing">;
  opacity?: SingleBooleanChoiceArg<"opacity">;
  letterSpacing?: SingleBooleanChoiceArg<"letterSpacing">;
  textCase?: SingleBooleanChoiceArg<"textCase">;
  textDecoration?: SingleBooleanChoiceArg<"textDecoration">;
};
type VariantPropType = keyof PlasmicDesignTokenItem__VariantsArgs;
export const PlasmicDesignTokenItem__VariantProps = new Array<VariantPropType>(
  "color",
  "bordeRadius",
  "borderWidth",
  "boxShadow",
  "fontFamily",
  "fontSize",
  "fontWeight",
  "lineHieight",
  "radii",
  "sizing",
  "spacing",
  "opacity",
  "letterSpacing",
  "textCase",
  "textDecoration"
);

export type PlasmicDesignTokenItem__ArgsType = {};
type ArgPropType = keyof PlasmicDesignTokenItem__ArgsType;
export const PlasmicDesignTokenItem__ArgProps = new Array<ArgPropType>();

export type PlasmicDesignTokenItem__OverridesType = {
  root?: p.Flex<"div">;
  tokenName?: p.Flex<"div">;
  textValue?: p.Flex<"div">;
  description?: p.Flex<"div">;
};

export interface DefaultDesignTokenItemProps {
  color?: SingleBooleanChoiceArg<"color">;
  bordeRadius?: SingleBooleanChoiceArg<"bordeRadius">;
  borderWidth?: SingleBooleanChoiceArg<"borderWidth">;
  boxShadow?: SingleBooleanChoiceArg<"boxShadow">;
  fontFamily?: SingleBooleanChoiceArg<"fontFamily">;
  fontSize?: SingleBooleanChoiceArg<"fontSize">;
  fontWeight?: SingleBooleanChoiceArg<"fontWeight">;
  lineHieight?: SingleBooleanChoiceArg<"lineHieight">;
  radii?: SingleBooleanChoiceArg<"radii">;
  sizing?: SingleBooleanChoiceArg<"sizing">;
  spacing?: SingleBooleanChoiceArg<"spacing">;
  opacity?: SingleBooleanChoiceArg<"opacity">;
  letterSpacing?: SingleBooleanChoiceArg<"letterSpacing">;
  textCase?: SingleBooleanChoiceArg<"textCase">;
  textDecoration?: SingleBooleanChoiceArg<"textDecoration">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDesignTokenItem__RenderFunc(props: {
  variants: PlasmicDesignTokenItem__VariantsArgs;
  args: PlasmicDesignTokenItem__ArgsType;
  overrides: PlasmicDesignTokenItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.color : undefined,

        variableType: "variant"
      },
      {
        path: "bordeRadius",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.bordeRadius
          : undefined,

        variableType: "variant"
      },
      {
        path: "borderWidth",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.borderWidth
          : undefined,

        variableType: "variant"
      },
      {
        path: "boxShadow",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.boxShadow : undefined,

        variableType: "variant"
      },
      {
        path: "fontFamily",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.fontFamily
          : undefined,

        variableType: "variant"
      },
      {
        path: "fontSize",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.fontSize : undefined,

        variableType: "variant"
      },
      {
        path: "fontWeight",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.fontWeight
          : undefined,

        variableType: "variant"
      },
      {
        path: "lineHieight",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.lineHieight
          : undefined,

        variableType: "variant"
      },
      {
        path: "radii",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.radii : undefined,

        variableType: "variant"
      },
      {
        path: "sizing",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.sizing : undefined,

        variableType: "variant"
      },
      {
        path: "spacing",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.spacing : undefined,

        variableType: "variant"
      },
      {
        path: "opacity",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.opacity : undefined,

        variableType: "variant"
      },
      {
        path: "letterSpacing",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.letterSpacing
          : undefined,

        variableType: "variant"
      },
      {
        path: "textCase",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.textCase : undefined,

        variableType: "variant"
      },
      {
        path: "textDecoration",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.textDecoration
          : undefined,

        variableType: "variant"
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootbordeRadius]: hasVariant(
            $state,
            "bordeRadius",
            "bordeRadius"
          ),
          [sty.rootborderWidth]: hasVariant(
            $state,
            "borderWidth",
            "borderWidth"
          ),
          [sty.rootradii]: hasVariant($state, "radii", "radii")
        }
      )}
    >
      <div
        data-plasmic-name={"tokenName"}
        data-plasmic-override={overrides.tokenName}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.tokenName
        )}
      >
        {"tokenName"}
      </div>

      <div
        data-plasmic-name={"textValue"}
        data-plasmic-override={overrides.textValue}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.textValue
        )}
      >
        {"value"}
      </div>

      <div
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.description
        )}
      >
        {"description"}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tokenName", "textValue", "description"],
  tokenName: ["tokenName"],
  textValue: ["textValue"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tokenName: "div";
  textValue: "div";
  description: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignTokenItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignTokenItem__VariantsArgs;
    args?: PlasmicDesignTokenItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesignTokenItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDesignTokenItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDesignTokenItem__ArgProps,
          internalVariantPropNames: PlasmicDesignTokenItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDesignTokenItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignTokenItem";
  } else {
    func.displayName = `PlasmicDesignTokenItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignTokenItem = Object.assign(
  // Top-level PlasmicDesignTokenItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokenName: makeNodeComponent("tokenName"),
    textValue: makeNodeComponent("textValue"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicDesignTokenItem
    internalVariantProps: PlasmicDesignTokenItem__VariantProps,
    internalArgProps: PlasmicDesignTokenItem__ArgProps
  }
);

export default PlasmicDesignTokenItem;
/* prettier-ignore-end */
